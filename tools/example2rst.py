#!/usr/bin/env python3
#
# The purpose of this file is to produce rst output interspersed into
# the the text of the example code

import os
import re
import tempfile
import shutil

from typing import Any, TextIO

# start of each section in example-code.py
section_re = r"""###\s+(?P<section>\b\w+\b):\s+(?P<desc>.*)\s*"""

# magic string from output to recognise new section
section_marker = "!@#$%^&*()(-:"

# start of rst output
header = """\
.. Automatically generated by example2rst.py.  Do not edit this file

.. currentmodule:: apsw

Example/Tour
============

This code demonstrates usage of APSW.  It gives you a good overview of
all the things that can be done.  Also included is output so you can
see what gets printed when you run the code.

.. code-block:: python
"""

def get_output(filename: str) -> dict[str, list[str]]:
    code: list[str] = []
    for line in open(filename, "rt"):
        mo = re.match(section_re, line)
        if mo:
            code.append(f"print('{ section_marker }{ mo.group('section') }')")
        else:
            code.append(line.rstrip())

    output: dict[str, list[str]] = {}
    cur_section = None

    def my_print(*args: Any) -> None:
        nonlocal output, cur_section
        s = " ".join(str(a) for a in args)
        if s.startswith(section_marker):
            cur_section = s[len(section_marker):]
            assert cur_section not in output
            output[cur_section] = []
            print("SECTION", cur_section)
        else:
            assert cur_section is not None
            output[cur_section].extend(s.split("\n"))
            print(s)

    exec(compile("\n".join(code), "example-code.py", "exec"), {"print": my_print})

    return output


def gen_rst(filename: str, outfile: TextIO, output: dict[str, list[str]]) -> None:
    print(header, file=outfile)
    cur_section = None
    seen_blank = True

    with open(filename, "rt") as source:
        for line in source:
            mo = re.match(section_re, line)
            if mo:
                if cur_section and output[cur_section]:
                    print("\n\n.. code-block:: output\n", file=outfile)
                    for l in output[cur_section]:
                        print("    " + l, file=outfile)
                    print("", file=outfile)
                cur_section = mo.group("section")
                print(f"\n.. index:: { mo.group('desc') } (example code)\n", file=outfile)
                print(f".. _example_{ cur_section }:\n", file=outfile)
                print(mo.group("desc"), file=outfile)
                print("-" * len(mo.group("desc")), file=outfile)
                print("", file=outfile)
                seen_blank = False
            else:
                if not seen_blank:
                    if not line.strip():
                        seen_blank = True
                        print("\n.. code-block:: python\n", file=outfile)
                    else:
                        l = line.rstrip()
                        l = l.lstrip("#")[1:]
                        print(l, file=outfile)
                    continue
                print("   " + line.rstrip(), file=outfile)
    f.flush()


if __name__ == "__main__":
    output = get_output("example-code.py")
    with tempfile.NamedTemporaryFile("wt", prefix="example2rst") as f:
        gen_rst("example-code.py", f, output)
        shutil.copy(f.name, "doc/example.rst")
